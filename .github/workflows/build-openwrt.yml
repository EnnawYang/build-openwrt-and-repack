name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      release:
        description: 'upload firmware to release [true/false]'
        required: false
        default: 'true'
      release_note:
        description: 'release note'
        required: false
        default: 'update'

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  CONFIG_URL: https://github.com/EnnawYang/openwrt-config
  CONFIG_BRANCH: lean-lede
  TOOLCHAIN_PREFIX: coolsnowwolf-lede-master
  TOOLCHAIN_TAG: toolchain
  RELEASE_BRANCH: main
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  Notification: true
  TZ: Asia/Shanghai

jobs:
  Build_OpenWrt:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        config_name: [x86_64, Rpi-4B, Newifi-D2, RM2100, DomyWifi-DW33D]
        # Ref: https://github.com/EnnawYang/openwrt-config

    steps:
    - name: Free up space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 256
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        overprovision-lvm: 'true'

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # docker image prune -a -f
        # sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install tzdata $(curl -fsSL git.io/depends-ubuntu-2004) libfuse-dev rdate
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
        sudo dpkg-reconfigure -f noninteractive tzdata
        echo "DEVICE_NAME=${{ matrix.config_name }}" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        export SOURCE_USER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
        echo "SOURCE_USER=$SOURCE_USER" >> $GITHUB_ENV
        export SOURCE_NAME="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_NAME=$SOURCE_NAME" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@main

    - name: Check space usage before Compile
      if: (!cancelled())
      run: df -hT

    - name: Clone Source Code
      id: clone
      if: (!cancelled())
      run: |
        cd $GITHUB_WORKSPACE
        git clone $CONFIG_URL -b $CONFIG_BRANCH openwrt-config --single-branch
        cd openwrt-config
        echo "CONFIGROOT=$PWD" >> $GITHUB_ENV
        cd $GITHUB_WORKSPACE
        git clone $SOURCE_URL -b $SOURCE_BRANCH openwrt --single-branch
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

    - name: Compare Toolchain Hash
      id: compare
      if: steps.clone.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        export CURRENT_HASH=$(git log --pretty=tformat:"%h" -n1 tools toolchain)
        echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
        echo "CURRENT_HASH is $CURRENT_HASH"
        export CACHE_HASH=$(curl -fSsL https://github.com/EnnawYang/OpenWrt-Toolchain-Cache/releases/download/$TOOLCHAIN_TAG/cache-hash.txt)
        echo "CACHE_HASH is $CACHE_HASH"
        if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
          echo "COMPILE_TOOLCHAIN=true" >> $GITHUB_OUTPUT
        else
          echo "COMPILE_TOOLCHAIN=false" >> $GITHUB_OUTPUT
        fi

    - name: Update Feeds
      id: update_feeds
      if: steps.compare.outputs.COMPILE_TOOLCHAIN == 'false'
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds update -a 

    - name: Load custom configuration
      id: custom
      if: steps.update_feeds.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        chmod +x $CONFIGROOT/*.sh
        $CONFIGROOT/"$DEVICE_NAME"-customize.sh || echo -e ""$DEVICE_NAME"-customize.sh not found or has errors"

    - name: Install Feeds
      id: install_feeds
      if: steps.custom.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a -f

    - name: Prepare config file
      id: config
      if: steps.install_feeds.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        cp $CONFIGROOT/"$DEVICE_NAME".config .config || exit 1
        sed -i '/CONFIG_DEVEL/d;/CONFIG_CCACHE/d;/CONFIG_BUILD_LOG/d' .config
        echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=n\nCONFIG_BUILD_LOG=y\nCONFIG_BUILD_LOG_DIR=\"./logs\"" >> .config
        export DEVICE_TARGET="$(grep -v ^\# .config | grep _DEVICE_ | cut -d_ -f3)"
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        export DEVICE_SUBTARGET="$(grep -v ^\# .config | grep _DEVICE_ | cut -d_ -f4)"
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        make defconfig
        export DEVICE_ARCH="$(grep -v ^\# .config | grep CONFIG_ARCH= | cut -d\" -f2)"
        echo "DEVICE_ARCH=$DEVICE_ARCH" >> $GITHUB_ENV

    - name: Fetch Cached Tools
      id: fetch_tools
      if: steps.compare.outputs.COMPILE_TOOLCHAIN == 'false' && steps.config.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        rm -rf build_dir staging_dir
        wget -c -t=3 https://github.com/EnnawYang/OpenWrt-Toolchain-Cache/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_PREFIX-$DEVICE_TARGET-$DEVICE_SUBTARGET-tools.tar.xz
        ./scripts/ext-tools.sh --tools *-tools.tar.xz
        rm *.tar.xz
        sudo chown -R $USER:$GROUPS build_dir
        sudo chown -R $USER:$GROUPS staging_dir
        sed -i 's/ $(tool.*\/stamp-compile)//;' Makefile
        sed -i 's/ $(tool.*\/stamp-install)//;' Makefile

    - name: Download package
      id: download
      if: steps.fetch_tools.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Fetch Cached Toolchain
      id: fetch
      if: steps.compare.outputs.COMPILE_TOOLCHAIN == 'false' && steps.config.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        curl -L --retry 3 https://github.com/EnnawYang/OpenWrt-Toolchain-Cache/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_PREFIX-$DEVICE_TARGET-$DEVICE_SUBTARGET-toolchain.tar.bz2 | tar -xjv
        cd $(ls -d */ | grep openwrt-toolchain-) && TDIR1=$(basename `pwd`)
        cd $(ls -d */ | grep toolchain-) && TDIR2=$(basename `pwd`)
        cd $OPENWRTROOT
        echo "toolchain floder is $TDIR1/$TDIR2"
        ./scripts/ext-toolchain.sh \
        --toolchain $TDIR1/$TDIR2 \
        --overwrite-config \
        --config $DEVICE_TARGET/$DEVICE_SUBTARGET
        # rm -rf staging_dir/toolchain-*
        cp -R $TDIR1/$TDIR2 staging_dir/toolchain-$DEVICE_ARCH-openwrt-linux-musl

    - name: Compile Tools
      id: tools
      if: steps.fetch.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        echo -e ">>>> $(nproc) thread compile ..."
        make tools/compile -j$(nproc)

    - name: Compile Toolchain
      id: toolchain
      if: steps.tools.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        echo -e ">>>> $(nproc) thread compile ..."
        make toolchain/compile -j$(nproc)

    - name: Compile Firmware
      id: compile
      if: steps.toolchain.conclusion == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        echo -e ">>>> $(nproc) thread compile ..."
        make -j$(nproc)

    - name: Check Space Usage After Compile
      if: (!cancelled())
      run: df -hT

    - name: Upload Error Logs
      uses: actions/upload-artifact@v3
      if: steps.compile.conclusion == 'failure' && !cancelled()
      with:
        name: Logs_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.OPENWRTROOT }}/logs

    - name: Upload Bin Directory
      uses: actions/upload-artifact@v3
      if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: Bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.OPENWRTROOT }}/bin

    - name: Organize Files
      id: organize
      if: steps.compile.conclusion == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $OPENWRTROOT/bin/targets/*/*
        rm -rf packages
        rm *.buildinfo *sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@v3
      if: steps.organize.conclusion == 'success' && !cancelled()
      with:
        name: Firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Release Tag
      id: tag
      if: github.event.inputs.release == 'true' && steps.compile.conclusion == 'success' && !cancelled()
      run: |
        echo "release_tag=$FILE_DATE" >> $GITHUB_OUTPUT
        touch release.txt
        echo -e "${{ github.event.inputs.release_note }}" > release.txt

    - name: Upload Firmware To Release
      if: steps.tag.conclusion == 'success' && !cancelled()
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: release.txt
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Remove Old Releases
      if: (!cancelled())
      uses: dev-drprasad/delete-older-releases@v0.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        keep_latest: 15
        delete_tags: true

    - name: Notification
      if: steps.compile.conclusion == 'success' && env.Notification == 'true' && !cancelled()
      run: |
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage -d chat_id=${{ secrets.TG_CHAT_ID }} -d text=""$DEVICE_NAME" compile succeeded" 2>&1 >/dev/null || echo "Telegram notification failed"
        # curl -s -X POST https://sctapi.ftqq.com/${{ secrets.SCTKEY }}.send?title=""$DEVICE_NAME" compile succeeded" 2>&1 >/dev/null || echo "Wechat notification failed"
